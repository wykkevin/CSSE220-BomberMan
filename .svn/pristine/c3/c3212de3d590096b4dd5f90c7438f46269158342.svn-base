import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;

/**
 * Class for bomb.
 */
public class Bomb implements Runnable {

	private Point position = new Point(0, 0);
	private int pauseTime;
	private ArrayList<Bomb> bombList = new ArrayList<Bomb>();
	private ArrayList<Monster> monsterList = new ArrayList<Monster>();
	private int range;
	private GameMap map;
	private Hero hero;
	private boolean hasBombed;
	private Thread bombThread;
	private int previous;

	public boolean hasBombed() {
		return this.hasBombed;
	}

	public void setHasBombed() {
		this.hasBombed = true;
	}

	public Bomb(GameMap map, Hero hero, ArrayList<Monster> monsterList, ArrayList<Bomb> bombList) {
		this.hero = hero;
		this.position = new Point((this.hero.getPosition().x + 25) / 50 * 50,
				(this.hero.getPosition().y + 25) / 50 * 50);
		this.range = 2;
		this.map = map;
		this.bombList = bombList;
		this.monsterList = monsterList;
		this.bombThread = null;
		this.previous = 0;
		this.hasBombed = false;
	}

	public int getPrevious() {
		return this.previous;
	}

	public void setPrevious(int previous) {
		this.previous = previous;
	}

	public void setThread(Thread thread) {
		this.bombThread = thread;
	}

	public Thread getThread() {
		return this.bombThread;
	}

	public void explode() {

		explodeToWall();
		explodeToHero(this.hero);
		explodeToBomb(this.bombList);
		explodeToMonster(this.monsterList);
		this.hasBombed = true;
		System.out.println("explode");
	}

	public void explodeToWall() {
		explodeToWallHelper(1, 0);
		explodeToWallHelper(-1, 0);
		explodeToWallHelper(0, 1);
		explodeToWallHelper(0, -1);
	}

	public void explodeToWallHelper(int x, int y) {
		int[][] currentMap = this.map.getGameMap();
		for (int i = 1; i < this.range + 1; i++) {
			if ((((this.getPosition().x + x * 50 * i) / 50) < 14) && (((this.getPosition().x + x * 50 * i) / 50) >= 0)
					&& (((this.getPosition().y + y * 50 * i) / 50) < 14)
					&& (((this.getPosition().y + y * 50 * i) / 50) >= 0)) {
				if (currentMap[(this.getPosition().x + x * 50 * i) / 50][(this.getPosition().y + y * 50 * i)
						/ 50] == 2) {
					break;
				}
				if (currentMap[(this.getPosition().x + x * 50 * i) / 50][(this.getPosition().y + y * 50 * i)
						/ 50] == 1) {
					currentMap[(this.getPosition().x + x * 50 * i) / 50][(this.getPosition().y + y * 50 * i) / 50] = 0;
					break;
				}
			}
		}
	}

	public void explodeToHero(Hero hero) {
		explodeToHeroHelper(hero,1, 0);
		explodeToHeroHelper(hero,-1, 0);
		explodeToHeroHelper(hero,0, 1);
		explodeToHeroHelper(hero,0, -1);
	}

	public void explodeToHeroHelper(Hero hero, int x, int y) {
		int[][] currentMap = this.map.getGameMap();
		for (int i = 1; i < this.range + 1; i++) {
			if ((((this.getPosition().x + x * 50 * i) / 50) < 14) && (((this.getPosition().x + x * 50 * i) / 50) >= 0)
					&& (((this.getPosition().y + y * 50 * i) / 50) < 14)
					&& (((this.getPosition().y + y * 50 * i) / 50) >= 0)) {
				if (currentMap[(this.getPosition().x + x * 50 * i) / 50][(this.getPosition().y + y * 50 * i)
						/ 50] == 2) {
					return;
				}
				if (this.position.x == hero.getPosition().x) {
					for (int j = -50 * this.range; j <= 50 * this.range; j++) {
						if (this.position.y == hero.getPosition().y + j) {
							this.hero.setLife(this.hero.getLife() - 1);
							this.hero.setPosition(new Point(0, 0));
							break;
						}
					}
				}
				if (this.position.y == hero.getPosition().y) {
					for (int j = -50 * this.range; j <= 50 * this.range; j++) {
						if (this.position.x == hero.getPosition().x + j) {
							this.hero.setLife(this.hero.getLife() - 1);
							this.hero.setPosition(new Point(0, 0));
							break;
						}
					}
				}
				if (this.hero.getLife() <= 0) {
					System.out.println("Game Over");
					break;
				}
			}
		}
	}

	public void explodeToBomb(ArrayList<Bomb> bombList) {
		for (int j = 0; j < bombList.size(); j++) {
			if (j >= this.bombList.indexOf(this)) {
				for (int i = 1; i < this.range + 1; i++) {
					if (this.getPosition().x == bombList.get(j).getPosition().x
							&& (this.getPosition().y == bombList.get(j).getPosition().y + 50 * i
									|| this.getPosition().y == bombList.get(j).getPosition().y - 50 * i)) {

						bombList.get(j).explode();
						bombList.get(j).setHasBombed();
					}
					if (this.getPosition().y == bombList.get(j).getPosition().y
							&& (this.getPosition().x == bombList.get(j).getPosition().x + 50 * i
									|| this.getPosition().x == bombList.get(j).getPosition().x - 50 * i)) {

						bombList.get(j).explode();
						bombList.get(j).setHasBombed();
					}
				}
			}
		}
	}

	public void explodeToMonster(ArrayList<Monster> monsterList) {
		if (this.monsterList.size() == 0) {
			return;
		}
		for (int j = 0; j < monsterList.size(); j++) {
			if (this.position.x == monsterList.get(j).getPosition().x) {
				for (int i = -50 * this.range; i <= 50 * this.range; i++) {
					if (this.position.y == monsterList.get(j).getPosition().y + i) {
						this.monsterList.remove(monsterList.get(j));
						return;
					}
				}
			}
			if (this.position.y == monsterList.get(j).getPosition().y) {
				for (int i = -50 * this.range; i <= 50 * this.range; i++) {
					if (this.position.x == monsterList.get(j).getPosition().x + i) {
						this.monsterList.remove(monsterList.get(j));
						return;
					}
				}
			}
		}
	}

	public Point getPosition() {
		return this.position;
	}

	public void setPosition(Point position) {
		this.position = position;
	}

	public void draw(Graphics2D g2) {
		BufferedImage bomb;
		try {
			bomb = ImageIO.read(new File("src/image/bomb.png"));
			g2.drawImage(bomb, (this.position.x + 25) / 50 * 50, (this.position.y + 25) / 50 * 50, 50, 50, null);
		} catch (IOException exception) {
			System.out.println("Unexpected IOException");
		}
	}

	@Override
	public void run() {
		try {
			Thread.sleep(2000);
		} catch (InterruptedException exception) {
			System.out.println("Thread");
		}
		if (!this.hasBombed) {
			this.explode();
		}
	}
}
