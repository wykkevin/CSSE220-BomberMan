import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;

/**
 * Class for bomb.
 */
public class Bomb {

	private Point position;
	private int pauseTime;
	private ArrayList<Bomb> bombList = new ArrayList<Bomb>();
	private ArrayList<Monster> monsterList = new ArrayList<Monster>();
	private int range;
	private GameMap map;
	private Hero hero;

	public Bomb(Point newPoint, GameMap map, Hero hero, ArrayList<Monster> monsterList) {
		this.position = newPoint;
		this.range = 1;
		this.map = map;
		this.hero = hero;
		this.monsterList = monsterList;
	}

	/*
	 * Need to be implemented with multithread.
	 */
	public void explode() {
		explodeToWall();
		explodeToHero(this.hero);
		explodeToBomb();
		explodeToMonster(this.monsterList);
		System.out.println("I am still learning to explode.");
	}

	public void explodeToWall() {
		int[][] currentMap = this.map.getMap();
		boolean isBreakableWall = false;
		for (int i = 1; i <= range; i++) {
			
			isBreakableWall = currentMap[(this.getPosition().x + 50 * i) / 50][this.getPosition().y / 50] == 1;
			if (isBreakableWall) {
				currentMap[(this.getPosition().x + 50 * i) / 50][this.getPosition().y / 50]=0;
			}
		}
	}

	public void explodeToHero(Hero hero) {
		if (this.position.x == this.hero.getPosition().x) {
			for (int i = -10; i <= 10; i++) {
				if (this.position.y == this.hero.getPosition().y + i) {
					this.hero.setLife(this.hero.getLife() - 1);
					this.hero.setPosition(new Point(0, 0));
				}
			}
		}
		if (this.position.y == this.hero.getPosition().y) {
			for (int i = -10; i <= 10; i++) {
				if (this.position.x == this.hero.getPosition().x + i) {
					this.hero.setLife(this.hero.getLife() - 1);
					this.hero.setPosition(new Point(0, 0));
				}
			}
		}
		if (this.hero.getLife() <= 0) {
			System.out.println("Game Over");
		}
	}

	public void explodeToBomb() {

	}

	public void explodeToMonster(ArrayList<Monster> monsterList) {
		for (Monster monster : monsterList) {
			if (this.position.x == monster.getPosition().x) {
				for (int i = -10; i <= 10; i++) {
					if (this.position.y == monster.getPosition().y + i) {
						this.monsterList.remove(monster);
					}
				}
			}
			if (this.position.y == monster.getPosition().y) {
				for (int i = -10; i <= 10; i++) {
					if (this.position.x == monster.getPosition().x + i) {
						this.monsterList.remove(monster);
					}
				}
			}
		}
	}

	public Point getPosition() {
		return position;
	}

	public void setPosition(Point position) {
		this.position = position;
	}

	public void draw(Graphics2D g2) {
		BufferedImage bomb;
		try {
			bomb = ImageIO.read(new File("src/image/bomb.png"));
			g2.drawImage(bomb, (this.position.x + 25) / 50 * 50, (this.position.y + 25) / 50 * 50, 50, 50, null);
		} catch (IOException exception) {
			System.out.println("Unexpected IOException");
		}
	}
}
