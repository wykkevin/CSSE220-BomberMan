import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

/**
 * This is an abstract class inherited by monster and hero.
 */
public abstract class Creature {
	protected Point position;
	protected int life;
	protected int remainBombs;
	protected GameComponent component;
	protected int speed;

	public Creature(GameComponent component) {
		this.position = new Point(0, 0);
		this.life = 3;
		this.remainBombs = 5;
		this.component = component;
		this.speed = 2;
	}

	public Point getPosition() {
		return this.position;
	}

	public void setPosition(Point position) {
		this.position = position;
	}

	public int getLife() {
		return this.life;
	}

	public void setLife(int life) {
		this.life = life;
	}

	public int getRemainBombs() {
		return this.remainBombs;
	}

	public void setRemainBombs(int bombs) {
		this.remainBombs = bombs;
	}

	public int getSpeed() {
		return this.speed;
	}

	public void setSpeed(int speed) {
		this.speed = speed;
	}

	public abstract String getName();

	public void draw(Graphics2D g2) {
		BufferedImage character;
		try {
			character = ImageIO.read(new File("src/image/" + getName() + ".png"));
			g2.drawImage(character, this.position.x, this.position.y, 50, 50, null);
		} catch (IOException exception) {
			System.out.println("Unexpected IOException");
		}
	}

	// Check if the given direction is able to pass.
	public boolean movable(String direction) {
		int row1 = 0, col1 = 0, row2 = 0, col2 = 0, check0 = 0;
		if (direction.equals("up") && this.getPosition().y % 50 == 0) {
			row1 = this.getPosition().x / 50;
			col1 = this.getPosition().y / 50 - 1;
			check0 = this.getPosition().x % 50;
			if (col1 < 0) {
				col1 = 0;
			}
			if (row1 > 12) {
				row2 = row1;

			} else {
				row2 = row1 + 1;
			}
			col2 = col1;
		}

		if (direction.equals("down") && this.getPosition().y % 50 == 0) {
			row1 = this.getPosition().x / 50;
			col1 = this.getPosition().y / 50 + 2;
			check0 = this.getPosition().x % 50;
			if (this.getPosition().y % 50 == 0) {
				col1--;
			}
			if (col1 > 13) {
				col1 = 13;
			}
			if (row1 > 12) {
				row2 = row1;
			} else {
				row2 = row1 + 1;
			}
			col2 = col1;
		}

		if (direction.equals("left") && this.getPosition().x % 50 == 0) {
			row1 = this.getPosition().x / 50 - 1;
			col1 = this.getPosition().y / 50;
			check0 = this.getPosition().y % 50;
			if (row1 < 0) {
				row1 = 0;
			}
			row2 = row1;
			if (col1 > 12) {
				col2 = col1;
			} else {
				col2 = col1 + 1;
			}
		}

		if (direction.equals("right") && this.getPosition().x % 50 == 0) {
			row1 = this.getPosition().x / 50 + 2;
			col1 = this.getPosition().y / 50;
			check0 = this.getPosition().y % 50;
			if (this.getPosition().x % 50 == 0) {
				row1--;
			}
			if (row1 > 13) {
				row1 = 13;
			}
			row2 = row1;
			if (col1 > 12) {
				col2 = col1;
			} else {
				col2 = col1 + 1;
			}
		}

		if (this.component.getMap().isWall(row1, col1)) {
			return false;
		}
		if (this.component.getMap().isWall(row2, col2) && check0 != 0) {
			return false;
		}
		return true;
	}
}
