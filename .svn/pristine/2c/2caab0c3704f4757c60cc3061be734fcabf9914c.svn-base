import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.JComponent;

/**
 * Class for monster
 */
public abstract class Monster implements Runnable{
	protected Point position;
	protected int remainBombs;
	protected JComponent component;
	protected Bomb bomb;
	protected ArrayList<Monster> monsterList = new ArrayList<Monster>();
	protected int speed;

	public Monster(JComponent component) {
		this.position = new Point(50, 50);
		this.remainBombs = 1;
		this.component = component;
		this.speed = 25;
	}

	public Point getPosition() {
		return this.position;
	}

	public void setPosition(Point position) {
		this.position = position;
	}

	public abstract String getName();

	public void draw(Graphics2D g2) {
		BufferedImage monster;
		try {
			monster = ImageIO.read(new File("src/image/monster" + getName() + ".png"));
			g2.drawImage(monster, this.position.x, this.position.y, 50, 50, null);
		} catch (IOException exception) {
			System.out.println("Unexpected IOException");
		}
	}

	public void addToList(ArrayList<Monster> monsterList) {
		monsterList.add(this);
	}

	public void move() {
		double random0To4 = (int) (Math.random() * 4);
		if (random0To4 == 0) {// up
			Point newPosition = new Point(this.position.x, this.position.y + this.speed);
			this.setPosition(newPosition);
		} else if (random0To4 == 1) {// down
			Point newPosition = new Point(this.position.x, this.position.y - this.speed);
			this.setPosition(newPosition);
		} else if (random0To4 == 2) {// left
			Point newPosition = new Point(this.position.x - this.speed, this.position.y);
			this.setPosition(newPosition);
		} else if (random0To4 == 3) {// right
			Point newPosition = new Point(this.position.x + this.speed, this.position.y);
			this.setPosition(newPosition);
		} else {
			System.out.println("no direction");
		}
	}
	
	@Override
	public void run() {
		try {
			while (true) {
				move();
				Thread.sleep(10000);
			}
		} catch (InterruptedException exception) {
			throw new RuntimeException("Unexpected thread interrupt");
		}
	}
}
